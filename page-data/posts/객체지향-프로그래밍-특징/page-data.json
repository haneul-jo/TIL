{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/객체지향-프로그래밍-특징","result":{"data":{"markdownRemark":{"id":"6a6a2a11-cf57-5699-8845-51c0c7a0fd27","html":"<p><strong>상태와 행위로 이루어진 객체를 만들고, 그 객체들간의 상호작용을 통해 로직을 구성.</strong></p>\n<p>객체</p>\n<ul>\n<li>instance of a class</li>\n<li>created many times</li>\n<li>data in</li>\n</ul>\n<p>클래스</p>\n<ul>\n<li>template</li>\n<li>declare once</li>\n<li>no data in</li>\n</ul>\n<p>객체는 실제로 존재하는 것, 클래스는 객체를 정의해 놓은 것, 또는 객체의 틀 또는 설계도를 의미한다.</p>\n<p><code class=\"language-text\">객체: 붕어빵, 클래스: 붕어빵틀</code> 비유를 많이 한다. 코드로 생각해보면 <code class=\"language-text\">붕어빵틀 붕어빵 = new 붕어빵틀()</code> 이 된다. 붕어빵틀로 붕어빵이 만들어지는 건 맞지만, 클래스와 객체의 관계로 비유는 잘못된 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">과자 홈런볼 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">과자</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">커피 에스프레소 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">커피</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>비슷한 객체들을 하나로 분류한 것을 클래스라고 이해하면 쉬울 것 같다.</p>\n<p>객체 지향 프로그래밍(OOP)의 특성 4가지</p>\n<ol>\n<li>\n<p>캡슐화 (Encapsulation)</p>\n<ul>\n<li>관련 데이터끼리 묶는다. 속성과 행위들을 관련있는것끼리 묶는다. 접근제어자 (public, private, protected)를 통해 필요한 부분만 접근 가능하게 하여 정보은닉을 할 수 있다.</li>\n<li>예를들어 강아지라는 클래스에 산책하기라는 메소드가 있다고 가정해보자. 강아지가 산책하기 전에 해야하는 일과 강아지의 상태는 (목줄, 입마개 등) 외부에서 알지 않아도 된다. (Private) 외부에서는 산책하다(public)만 접근하면 된다.</li>\n</ul>\n</li>\n<li>\n<p>추상화 (Abstraction)</p>\n<ul>\n<li>추상화란 <strong>이 클래스를 쓰기위해 공통점을 찾는 일</strong>. 이걸 고민하는 단계! 코드상에서 로직부분을 제외한 선언부분만을 설계한다.</li>\n<li>예를들면 동물( 호랑이, 새 등 )이라는 클래스가 있다고 가정해보자. 동물이라는 클래스에는 날다(fly) 라는 메소드가 있다. 동물이라는 클래스를 상속받은 호랑이는 날 수 없다. 동물이라는 클래스에서 날다(fly)가 아닌 움직이다(move)라는 메소드를 추상화(Abstract)하여 호랑이, 새 클래스에서 필요한 부분을 구현하면 된다.</li>\n</ul>\n</li>\n<li>\n<p>상속성 (Inheritance)</p>\n<ul>\n<li>부모클래스의 속성과 기능을 그대로 물려받아 사용할 수 있다. <strong>IS-A 관계</strong></li>\n<li>예를들면 강아지클래스는 동물클래스 상속 받았다. 개는 동물에 포함, <code class=\"language-text\">개는 동물이다.</code>라고 말할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>다형성 (polymorphism)</p>\n<ul>\n<li>\n<p>하나의 객체가 여러개의 자료형 타입을 가질 수 있는 것, 한가지의 인터페이스를 구현하거나 또는 동일한 부모클래스를 상속받았을 때 동일한 함수를 어떤 클래스인지 구분하지 않고 호출 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"울어\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nAnimal animal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// animal.cry()</span>\nCat ca₩ <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// cat.cry()</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>","fields":{"slug":"/posts/객체지향-프로그래밍-특징","tagSlugs":["/tag/type-script/","/tag/객체지향/"]},"frontmatter":{"date":"2021-07-24T05:27:28.979Z","description":"상태와 행위로 이루어진 객체를 만들고, 그 객체들간의 상호작용을 통해 로직을 구성한다.","tags":["TypeScript","객체지향"],"title":"객체 지향 프로그래밍 ( Object Oriented Programing ) 특징","socialImage":null}}},"pageContext":{"slug":"/posts/객체지향-프로그래밍-특징"}},"staticQueryHashes":["251939775","401334301","825871152"]}