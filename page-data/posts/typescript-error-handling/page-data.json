{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/typescript-error-handling","result":{"data":{"markdownRemark":{"id":"a3d6f4cb-a5a4-5f08-b232-ed0f12f17847","html":"<p><strong>에러처리를 잘 하면 유지보수성, 안정성이 높다.</strong></p>\n<ul>\n<li>\n<p>예측 가능한 에러는 (expected error) <code class=\"language-text\">error state</code> 라고 부른다.</p>\n<p>❓ 왜 <code class=\"language-text\">error state</code>라고 부르는지는 잘 모르겠으나, 명확한 에러인 경우는 사전에 미리 알고 대응이 가능하여 에러상태를 알수있다. 라는 표현이라고 생각하기로 했다.</p>\n</li>\n<li>예측 불가능한 에러 (unexpected error)는 <code class=\"language-text\">exception</code> 라고 부른다.</li>\n<li>exception처리는 try → catch → finally 로 처리, 에러에 대한 처리를 할 수 있는 곳에서 catch 하는 것이 좋다.</li>\n<li>\n<p>TypeScript <code class=\"language-text\">catch(error)</code>에 에러타입은 <code class=\"language-text\">any</code> 타입이다. 어떠한 타입정보도 전달되지 않아 <code class=\"language-text\">instanceof</code>를 사용할 수 없다. →❗️ 어떤 에러인지 파악이 불가능</p>\n<ul>\n<li>\n<p>예상할 수 있는 (expected error), <code class=\"language-text\">error state</code>는 <code class=\"language-text\">type</code>을 정의하여 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">SuccessState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ErrorState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    reason<span class=\"token operator\">:</span> <span class=\"token string\">\"timeout\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러는 이유를 알려주는 게 좋다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ResultState</span> <span class=\"token operator\">=</span> SuccessState <span class=\"token operator\">|</span> ErrorState<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeoutError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// throw</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerClientThrow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">tryConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeoutError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// state</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerClientState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">tryConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ResultState <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            reason<span class=\"token operator\">:</span> <span class=\"token string\">\"timeout\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/typescript-error-handling","tagSlugs":["/tag/type-script/","/tag/error/"]},"frontmatter":{"date":"2021-07-28T14:44:39.888Z","description":"에러처리를 잘 하면 유지보수성, 안정성이 높다. 예측 가능한 에러와 예측 불가능한 에러를 구분하여 잘 처리하여야 한다.","tags":["TypeScript","Error"],"title":"타입스크립트 에러 처리 (Error Handling)","socialImage":null}}},"pageContext":{"slug":"/posts/typescript-error-handling"}},"staticQueryHashes":["251939775","401334301","825871152"]}